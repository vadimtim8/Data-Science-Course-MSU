# -*- coding: utf-8 -*-
"""HW3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1auK7eqhAmAt-pZ6tas_U60LejKfcmfpM
"""

import numpy as np

#### Задачи

# Найти сумму последовательности 1, 1/2, 1/3, ... , 1/1000

a = np.ones(1000)
b = np.arange(1,1001)
c = a/b
np.sum(c)

# Найти сумму чисел от 1 до 100 без цикла в одну строчку

np.sum(np.arange(1,101))

#  Найти определитель и след квадратной матрицы M(100X100), которая задается следующими условиями: пусть: i = 0...99 j = 0...99

# i - номер строки квадратной матрицы M j - номер столбца

# a_ij = i + j + 1

a = np.zeros((100,100))
for i in range(100):
  for j in range(100):
    a[i][j] = i + j + 1
print(a)
b = np.linalg.det(a)
c = np.trace(a)
print(b)
print(c)

import matplotlib.pyplot as plt

text_horse = """(-4;-6),(-4;-5),(-3;-4),(-4;-3),(-3;-2),(-5;0),(-5;3),(-3;5),(-3;6),(-2;5),(0;5),(1;4),(2;4),(3;3),(1;3),(3;2),(1;2),(1;1),

(1;-1),(0;-2),(1;-3),(0;-4),(1;-5),(1;-6),(-4;-6)"""

horse_tuple = "("+ text_horse.replace(';',',') + ")"
horse_tuple

coord_horse = eval(horse_tuple)
coord_array = np.array(coord_horse).T
coord_array

print(coord_array.shape)

glaz = np.array((-1,4))
plt.plot(coord_array[0,:],coord_array[1,:])
plt.scatter(-1,4)
plt.xlim(-7,7)
plt.ylim(-7,7)
plt.gca().set_aspect('equal')
plt.show()

theta = np.radians(30)
c, s = np.cos(theta), np.sin(theta)
R = np.array(((c,-s),(s,c)))
R

rotated_array = np.dot(R,coord_array)
rotated_glaz = np.dot(R,glaz)

plt.plot(rotated_array[0,:],rotated_array[1,:], color='red')
plt.xlim(-7,7)
plt.ylim(-7,7)
plt.gca().set_aspect('equal')
plt.scatter(*rotated_glaz, color='red')
plt.plot(coord_array[0,:],coord_array[1,:], alpha=.2, color='blue')
plt.scatter(-1,4, alpha=.2, color='blue')
plt.show()