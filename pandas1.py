# -*- coding: utf-8 -*-
"""Pandas1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s_vyqHckSb6Hk4Y08mb-AZwjXcc0fdLI
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

credscore = pd.read_csv("shmya_final_version.csv")
credscore

credscore.info()

credscore.head(5)

credscore.describe()

credscore.isnull().sum()

credscore.isnull().sum().sort_values().index

credscore.isnull().sum().sort_values().values

credscore.duplicated().sum()

credscore.head()

credscore.pivot_table(index='Age', values='Income')

credscore.pivot_table(index='Selfempl', values='Income') #Самозанятые в среднем получают больше

pd.pivot_table(credscore, index='OwnRent', values='Avgexp') #Те, кто имеет недвижимость, в среднем тратят в месяц больше почти в 2 раза

pd.pivot_table(credscore, index='Age', values="Avgexp", aggfunc = ["mean", "std", "sum"])

def pvt_tbl(dataframe, index_col, value_col, columns_col=None, aggfunc_col=["mean"]):
  pvt_table = dataframe.pivot_table(values=value_col, index=index_col, columns=columns_col, aggfunc=aggfunc_col)
  return pvt_table

for element in ["Acc", "OwnRent", "Selfempl"]:
  print(pvt_tbl(credscore, index_col = element, value_col = 'Income'))
  print("*"*20)

"""1) Те, кто владеет недвижимостью, в среднем имеют доход в 1,4 раза выше, чем те, кто снимает в аренду
2) У самозанятых доход выше в среднем в 1,4 раза 
"""

bars1 = credscore['MDR'].value_counts(normalize=True)

bars1.plot(kind='bar')
plt.show()

def bar_vl_count(dataframe, value_col):
  dataframe[value_col].value_counts(normalize=True).plot(kind='bar')

for element in ['Acc', 'OwnRent', 'Selfempl']:
  bar_vl_count(credscore, element)
  plt.title(element)
  plt.show()

### Более 70% заявок на получение кредитной карты было одобрено.
### Менее 40% имеют недвижимость в собственности
### Свыше 80% самозанятые

def sns_boxplt(dataframe, x_col, y_col):
  plt.figure(figsize=(12,6))
  sns.boxplot(data=credscore,x=x_col, y=y_col)

for element in ['Acc', 'OwnRent', 'Selfempl']:
  sns_boxplt(credscore, element, 'Avgexp')
  plt.show()

credscore.corr('spearman')

credscore.corr('pearson')

credscore.corr('kendall')

pd.get_dummies(credscore)

credscore_dummies = pd.get_dummies(credscore, drop_first=True)

credscore_dummies.corr()

plt.figure(figsize=(12,12))
sns.heatmap(credscore_dummies.corr(), cmap = 'coolwarm', annot = True)

OwnRentRatio = credscore['OwnRent'].value_counts(normalize=True)
OwnRentRatio.plot(kind='pie', subplots=True)
plt.title('Own Rent Yes/No (1/0) Ratio')
plt.show()

sns.lmplot(x='Age', y='Avgexp', hue='OwnRent', data = credscore, height=7, aspect=1.6, robust=True, palette='tab10', scatter_kws=dict(s=60, linewidth=.7, edgecolors='black'))

plt.xlabel('Age')
plt.ylabel('Income')
plt.scatter(credscore['Age'], credscore['Income'])
plt.show()

"""Линейная Регрессия"""

x = credscore[['Age']]
y = credscore['Income']
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

x_train, x_test, y_train, y_test = train_test_split(x,y, train_size=0.9, random_state=8)
lin_reg = LinearRegression().fit(x_train, y_train)
lin_reg.predict(x_test)
lin_reg.score(x_test, y_test)

lin_reg.score(x_train, y_train)

"""Логистическая Регрессия"""

from sklearn.linear_model import LogisticRegression
X_train, X_test, Y_train, Y_test = train_test_split(credscore[['Income']], credscore['Selfempl'], train_size = 0.9)
log_reg = LogisticRegression().fit(X_train, Y_train)
log_reg.predict(X_test)

log_reg.predict_proba(X_test)