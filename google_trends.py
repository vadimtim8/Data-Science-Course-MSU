# -*- coding: utf-8 -*-
"""google_trends.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11SFZZX_CLPX6r0emP_Df5uAmqv3eeDkQ
"""

!pip install sktime
!pip install pytrends

import numpy as np
import pandas as pd
from sktime.utils.plotting import plot_series
from sktime.forecasting.model_selection import temporal_train_test_split
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from scipy.stats import probplot
import math
from statistics import mean, stdev
from matplotlib import style
style.use('ggplot')
from pytrends.request import TrendReq

df = pd.read_csv('multiTimeline.csv')
df.head()
df.drop(index='Месяц')

data.index = df.index.to_period('D')
data.index

plot_series(df['Категория: Все категории']);

pytrend = TrendReq()

pytrend.build_payload(kw_list=['Barcelona','Chelsea','Arsenal'],timeframe='today 5-y',geo='RU')

data = pytrend.interest_over_time()
# pytrend.get_historical_interest(kw_list, year_start=2018, month_start=1, day_start=1, hour_start=0, year_end=2018, month_end=2, day_end=1, hour_end=0, cat=0, geo='', gprop='', sleep=0)
data.info()

data.head(10)

plot_series(data['Chelsea']);

data.index = data.index.to_period('D')
data.index

data.info()

data = data.resample('M', convention='end').mean()

plot_series(data['Chelsea']);

probplot(data['Chelsea'], plot=plt, dist='norm')

"""**ETS-модель**"""

y_train, y_test = temporal_train_test_split(data['Chelsea'], test_size=6)

from sktime.forecasting.ets import AutoETS

aaa = AutoETS(error='add', trend='add', seasonal='add', sp=2)
aaa.fit(y_train)

aaa.summary()

horizon = np.arange(1, 7)
y_pred = aaa.predict(horizon)

y_pred

plot_series(y_train, y_test, y_pred, labels=['train', 'test', 'ets_aaa']);

"""**ARIMA-модель**"""

import statsmodels.api as sm
Chelsea=data['Chelsea']

test_DF = sm.tsa.adfuller(Chelsea)
print('adf:', test_DF[0])
print('p-value:', test_DF[1])
print('critical values:', test_DF[4])
if test_DF[0] > test_DF[4]['5%']:
    print('есть единичные корни, ряд нестационарен при 5%-м уровне значимости')
else:
    print('единичных корней нет, ряд стационарен при 5%-м уровне значимости')
print("*"*20)
#%%

Chelsea_diff1 = Chelsea.diff(periods = 1).dropna()
test_DF_diff1 = sm.tsa.adfuller(Chelsea_diff1)
print('adf:', test_DF_diff1[0])
print('p-value:', test_DF_diff1[1])
print('critical values:', test_DF_diff1[4])
if test_DF_diff1[0] > test_DF_diff1[4]['5%']:
    print('есть единичные корни, ряд нестационарен при 5%-м уровне значимости')
else:
    print('единичных корней нет, ряд стационарен при 5%-м уровне значимости')

test_KPSS = sm.tsa.kpss(Chelsea)
print('KPSS:', test_KPSS[0])
print('p-value:', test_KPSS[1])
print('critical values:', test_KPSS[3])
if test_KPSS[0] > test_KPSS[3]['5%']:
    print('есть детерминированный тренд, ряд нестационарен при 5%-м уровне значимости')
else:
    print('нет детерминированного тренда, ряд стационарен при 5%-м уровне значимости')
print("*"*20)
#%%

Chelsea_diff1 = Chelsea.diff(periods = 1).dropna()
test_KPSS_diff1 = sm.tsa.kpss(Chelsea_diff1)
print('KPSS:', test_KPSS_diff1[0])
print('p-value:', test_KPSS_diff1[1])
print('critical values:', test_KPSS_diff1[3])
if test_KPSS_diff1[0] > test_KPSS_diff1[3]['5%']:
    print('есть детерминированный тренд, ряд нестационарен при 5%-м уровне значимости')
else:
    print('нет детерминированного тренда, ряд стационарен при 5%-м уровне значимости')

fig = plt.figure(figsize=(7, 5.5))
fig.suptitle('Графики ACF и PACF для переменной Chelsea_diff1')
ax3 = fig.add_subplot(211)
fig = sm.graphics.tsa.plot_acf(Chelsea_diff1, lags = 25, ax = ax3)
ax4 = fig.add_subplot(212)
fig = sm.graphics.tsa.plot_pacf(Chelsea_diff1, lags = 25, ax = ax4)

model = sm.tsa.ARIMA(y_train, order=(1, 0, 1)).fit()
print(model.summary())

model.plot_diagnostics(lags=20)

forecast=model.forecast(steps=6)
forecast

forecast.plot()

plot_series(y_train, y_test, forecast, labels=['train', 'test', 'ARIMA']);

data.to_csv('GoogleTrends2.csv', index=True, sep=',')

from statsmodels.tsa.api import VAR
from statsmodels.tsa.stattools import adfuller
from statsmodels.tools.eval_measures import rmse, aic
from statsmodels.tsa.stattools import grangercausalitytests
from statsmodels.tsa.vector_ar.vecm import coint_johansen
#from statsmodels.stats.stattools import durbin_watso
from sktime.utils.plotting import plot_series

data1 = data.drop(columns='isPartial')
data1.head()

model = VAR(data1)
for i in [1, 2, 3, 4]:
    result = model.fit(i)
    print('Lag Order =', i)
    print('AIC : ', result.aic)
    print('BIC : ', result.bic)
    print('FPE : ', result.fpe)
    print('HQIC: ', result.hqic, '\n')

x = model.select_order(maxlags = 1)
x.summary()

model_fitted = model.fit(2)
print(model_fitted.summary())