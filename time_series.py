# -*- coding: utf-8 -*-
"""time_series

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iDDGG1OshankHRduKa6hpB7tLQpeH6iD
"""

!pip install sktime

import numpy as np
import pandas as pd
from sktime.utils.plotting import plot_series
from sktime.forecasting.model_selection import temporal_train_test_split
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from scipy.stats import probplot
import math
from statistics import mean, stdev
from matplotlib import style
style.use('ggplot')

from google.colab import files
uploaded = files.upload()

data = pd.read_csv("vendor-GB-monthly-201003-202202.csv")
data.info()
data.describe()

data.tail()

data.info()

data.index = pd.to_datetime(data['Date'])
data = data.drop(columns='Date')
data.head()
#type(data)

data = data.sort_values(by='Date')
data.index = data.index.to_period('M')
data.index
#type(data.index)

data.info()

plot_series(data['Apple']);

probplot(data['Apple'], plot=plt, dist='norm')

"""**ETS-модель**"""

y_train, y_test = temporal_train_test_split(data['Apple'], test_size=24)

from sktime.forecasting.ets import AutoETS

aaa = AutoETS(error='add', trend='add', seasonal='add', sp=12)
aaa.fit(y_train)

aaa.summary()

horizon = np.arange(1, 25)
y_pred = aaa.predict(horizon)

y_pred

plot_series(y_train, y_test, y_pred, labels=['train', 'test', 'ets_aaa']);

from sktime.performance_metrics.forecasting import mape_loss
mape_loss(y_test, y_pred)

"""**ARIMA-модель**"""

import statsmodels.api as sm
Apple=data['Apple']

test_DF = sm.tsa.adfuller(Apple)
print('adf:', test_DF[0])
print('p-value:', test_DF[1])
print('critical values:', test_DF[4])
if test_DF[0] > test_DF[4]['5%']:
    print('есть единичные корни, ряд нестационарен при 5%-м уровне значимости')
else:
    print('единичных корней нет, ряд стационарен при 5%-м уровне значимости')
print("*"*20)
#%%

Apple_diff1 = Apple.diff(periods = 1).dropna()
test_DF_diff1 = sm.tsa.adfuller(Apple_diff1)
print('adf:', test_DF_diff1[0])
print('p-value:', test_DF_diff1[1])
print('critical values:', test_DF_diff1[4])
if test_DF_diff1[0] > test_DF_diff1[4]['5%']:
    print('есть единичные корни, ряд нестационарен при 5%-м уровне значимости')
else:
    print('единичных корней нет, ряд стационарен при 5%-м уровне значимости')

test_KPSS = sm.tsa.kpss(Apple)
print('KPSS:', test_KPSS[0])
print('p-value:', test_KPSS[1])
print('critical values:', test_KPSS[3])
if test_KPSS[0] > test_KPSS[3]['5%']:
    print('есть детерминированный тренд, ряд нестационарен при 5%-м уровне значимости')
else:
    print('нет детерминированного тренда, ряд стационарен при 5%-м уровне значимости')
print("*"*20)
#%%

Apple_diff1 = Apple.diff(periods = 1).dropna()
test_KPSS_diff1 = sm.tsa.kpss(Apple_diff1)
print('KPSS:', test_KPSS_diff1[0])
print('p-value:', test_KPSS_diff1[1])
print('critical values:', test_KPSS_diff1[3])
if test_KPSS_diff1[0] > test_KPSS_diff1[3]['5%']:
    print('есть детерминированный тренд, ряд нестационарен при 5%-м уровне значимости')
else:
    print('нет детерминированного тренда, ряд стационарен при 5%-м уровне значимости')

fig = plt.figure(figsize=(7, 5.5))
fig.suptitle('Графики ACF и PACF для переменной Apple')
ax3 = fig.add_subplot(211)
fig = sm.graphics.tsa.plot_acf(Apple, lags = 25, ax = ax3)
ax4 = fig.add_subplot(212)
fig = sm.graphics.tsa.plot_pacf(Apple, lags = 25, ax = ax4)

model = sm.tsa.ARIMA(Apple, order=(1, 0, 0)).fit()
print(model.summary())

model.plot_diagnostics(lags=20)

forecast=model.forecast(steps=12)
forecast

forecast.plot()

plot_series(Apple, forecast, labels=['Apple', 'forecast']);

